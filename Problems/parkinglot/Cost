public Ticket park(Vehicle vehicle) throws ParkingFullException {
		Slot nextAvailableSlot;
		if (vehicle.getVehicleSize().equals(VehicleSize.FOURWHEELER)) {
			nextAvailableSlot = getNextAvailableFourWheelerSlot();
		} else {
			nextAvailableSlot = getNextAvailableTwoWheelerSlot();
		}
		nextAvailableSlot.occupySlot(vehicle);
		System.out.printf("Allocated slot number: %d \n", nextAvailableSlot.getSlotNumber());
		Ticket ticket = new Ticket(nextAvailableSlot.getSlotNumber(), vehicle.getVehicleNumber(),
				vehicle.getVehicleSize(), new Date());
		return ticket;
	}

	public int unPark(Ticket ticket, ParkingChargeStrategy parkingCostStrategy) throws InvalidVehicleNumberException {
		int costByHours = 0;
		Slot slot;
		try {
			if (ticket.getVehicleSize().equals(VehicleSize.FOURWHEELER)) {
				slot = getFourWheelerSlotByVehicleNumber(ticket.getVehicleNumber());
			} else {
				slot = getTwoWheelerSlotByVehicleNumber(ticket.getVehicleNumber());
			}
			slot.vacateSlot();
			int hours = getHoursParked(ticket.getDate(), new Date());
			costByHours = parkingCostStrategy.getCharge(hours);
			System.out.println(
				"Vehicle with registration " + ticket.getVehicleNumber() + " at slot number " + slot.getSlotNumber() +
				" was parked for " + hours + " hours and the total charge is " + costByHours);
		} catch (InvalidVehicleNumberException invalidVehicleNumber) {
			System.out.println(invalidVehicleNumber.getMessage());
			throw invalidVehicleNumber;
		}
		return costByHours;
	}
	
	private int getHoursParked(Date startDate, Date endDate) {
		long secs = (endDate.getTime() - startDate.getTime()) / 1000;
		int hours = (int)(secs / 3600);
		return hours;
	
	}
	

